import React, {Component} from 'react';
import 'd3';
import * as d3 from 'd3';
import {connect} from 'react-redux';

import ResetButton from '../buttons/ResetButton';


/**
 *Component that creates the map.
 *
 * @class Map
 * @extends {Component}
 */
class Map extends Component {
  /**
   *Creates an instance of Map.
   * @param {*} props
   * @memberof Map
   */
  constructor(props) {
    super(props),
    this.state = {
      germany: [10.3736325636218, 51.053178814923065],
    };
  }





  headline = () => {
      return (this.props.view_multiple ? "Zusammengesetzter Indikator" : `${this.props.metadata[`${this.props.value_dic['var_name_0']}`].csvname}, ${this.props.value_dic['var_year_0']} ` )
  }

  renderlogo = () => {
      return(

          <div id = "map_logo">
          <svg x="0" y="0" width="168" height="104" viewBox="0, 0, 168, 104">
				<g id="Background">
					<rect x="0" y="0" width="168" height="104" fill="#FFFFFF"/>
				</g>
				<g id="Name" transform="scale(1,-1) translate(0,-104)">
					<path d="M 67.7479,80.1166 C 67.7479,79.831 67.7122,79.5811 67.6408,79.3669 C 67.5694,79.1527 67.4722,78.9683 67.3493,78.8136 C 67.2263,78.6589 67.0835,78.5339 66.9209,78.4387 C 66.7582,78.3435 66.5896,78.2721 66.4151,78.2245 L 66.4151,78.2007 C 66.6293,78.161 66.8296,78.0857 67.016,77.9746 C 67.2025,77.8635 67.3651,77.7247 67.504,77.5581 C 67.6428,77.3915 67.7539,77.1952 67.8372,76.9691 C 67.9205,76.7429 67.9621,76.495 67.9621,76.2253 C 67.9621,75.9 67.9066,75.6025 67.7955,75.3328 C 67.6844,75.0631 67.5119,74.829 67.2778,74.6307 C 67.0438,74.4324 66.7483,74.2777 66.3913,74.1666 C 66.0343,74.0555 65.6099,74 65.118,74 L 63.4401,74 L 63.4401,82.211 L 65.0228,82.211 C 65.5067,82.211 65.9213,82.1614 66.2664,82.0623 C 66.6115,81.9631 66.8951,81.8223 67.1172,81.6398 C 67.3393,81.4573 67.5,81.2372 67.5992,80.9794 C 67.6983,80.7215 67.7479,80.4339 67.7479,80.1166 z
				M 66.7007,80.0809 C 66.7007,80.4617 66.5658,80.7751 66.2961,81.021 C 66.0264,81.2669 65.6019,81.3899 65.0228,81.3899 L 64.4754,81.3899 L 64.4754,78.5577 L 65.0109,78.5577 C 65.5662,78.5577 65.9867,78.6926 66.2723,78.9623 C 66.5579,79.232 66.7007,79.6049 66.7007,80.0809 z
				M 66.8554,76.2967 C 66.8554,76.741 66.7106,77.092 66.4211,77.3499 C 66.1315,77.6077 65.717,77.7366 65.1775,77.7366 L 64.4754,77.7366 L 64.4754,74.8568 L 65.118,74.8568 C 65.7289,74.8568 66.1712,74.9778 66.4449,75.2198 C 66.7186,75.4617 66.8554,75.8207 66.8554,76.2967 z
				M 73.2338,74 L 72.3532,74 L 72.3532,74.6426 L 72.3294,74.6426 C 72.3056,74.595 72.254,74.5256 72.1747,74.4344 C 72.0954,74.3431 71.9942,74.2559 71.8713,74.1726 C 71.7483,74.0893 71.5995,74.0159 71.425,73.9524 C 71.2505,73.8889 71.0561,73.8572 70.8419,73.8572 C 70.588,73.8572 70.36,73.8949 70.1577,73.9702 C 69.9554,74.0456 69.7828,74.1666 69.64,74.3332 C 69.4972,74.4998 69.3881,74.716 69.3128,74.9818 C 69.2374,75.2475 69.1997,75.5748 69.1997,75.9635 L 69.1997,79.712 L 70.1636,79.712 L 70.1636,76.0349 C 70.1636,75.5589 70.241,75.2198 70.3957,75.0174 C 70.5504,74.8152 70.7903,74.714 71.1156,74.714 C 71.3933,74.714 71.6273,74.7834 71.8177,74.9223 C 72.0081,75.0611 72.1588,75.1979 72.2699,75.3328 L 72.2699,79.712 L 73.2338,79.712 L 73.2338,74 z
				M 77.8272,74 L 77.8272,77.6771 C 77.8272,78.161 77.7459,78.5081 77.5833,78.7184 C 77.4206,78.9286 77.1727,79.0337 76.8395,79.0337 C 76.5539,79.0337 76.3159,78.9623 76.1255,78.8195 C 75.9351,78.6767 75.7844,78.5379 75.6733,78.403 L 75.6733,74 L 74.7094,74 L 74.7094,79.712 L 75.59,79.712 L 75.59,79.0694 L 75.6138,79.0694 C 75.6376,79.117 75.6892,79.1864 75.7685,79.2777 C 75.8478,79.3689 75.951,79.4562 76.0779,79.5395 C 76.2048,79.6228 76.3556,79.6961 76.5301,79.7596 C 76.7046,79.8231 76.903,79.8548 77.1251,79.8548 C 77.379,79.8548 77.609,79.8171 77.8153,79.7418 C 78.0216,79.6664 78.1961,79.5454 78.3389,79.3788 C 78.4817,79.2122 78.5928,78.996 78.6721,78.7303 C 78.7514,78.4645 78.7911,78.1372 78.7911,77.7485 L 78.7911,74 L 77.8272,74 z
				M 79.9692,76.7727 C 79.9692,77.3518 80.0446,77.8358 80.1953,78.2245 C 80.346,78.6132 80.5404,78.9266 80.7784,79.1646 C 81.0164,79.4026 81.2861,79.5712 81.5876,79.6704 C 81.8891,79.7695 82.1905,79.8191 82.492,79.8191 C 82.6745,79.8191 82.8331,79.8052 82.968,79.7774 C 83.1029,79.7497 83.2139,79.716 83.3012,79.6763 L 83.3012,82.4133 L 84.2651,82.5204 L 84.2651,74 L 83.3845,74 L 83.3845,74.6069 L 83.3607,74.6069 C 83.3369,74.5593 83.2933,74.4939 83.2298,74.4106 C 83.1663,74.3273 83.0791,74.244 82.968,74.1607 C 82.8569,74.0774 82.7181,74.006 82.5515,73.9464 C 82.3849,73.8869 82.1905,73.8572 81.9684,73.8572 C 81.6987,73.8572 81.4428,73.9107 81.2009,74.0179 C 80.9589,74.125 80.7467,74.2955 80.5642,74.5296 C 80.3817,74.7636 80.237,75.0651 80.1299,75.434 C 80.0228,75.8029 79.9692,76.2491 79.9692,76.7727 z
				M 82.2302,74.714 C 82.3809,74.714 82.5158,74.7338 82.6348,74.7735 C 82.7538,74.8132 82.8569,74.8628 82.9442,74.9223 C 83.0315,74.9818 83.1049,75.0432 83.1644,75.1067 C 83.2239,75.1702 83.2695,75.2257 83.3012,75.2733 L 83.3012,78.7957 C 83.2139,78.8512 83.1128,78.8988 82.9978,78.9385 C 82.8827,78.9782 82.7379,78.998 82.5634,78.998 C 82.3413,78.998 82.133,78.9603 81.9387,78.885 C 81.7443,78.8096 81.5757,78.6846 81.4329,78.5101 C 81.2901,78.3356 81.1771,78.1095 81.0938,77.8318 C 81.0105,77.5541 80.9688,77.213 80.9688,76.8084 C 80.9688,76.4117 81.0025,76.0805 81.07,75.8148 C 81.1374,75.549 81.2306,75.3348 81.3496,75.1722 C 81.4686,75.0095 81.6035,74.8925 81.7542,74.8211 C 81.9049,74.7497 82.0636,74.714 82.2302,74.714 z
				M 89.4059,77.7842 C 89.4059,77.5383 89.398,77.3261 89.3821,77.1476 C 89.3662,76.9691 89.3504,76.8124 89.3345,76.6775 L 86.419,76.6775 C 86.4507,76.0032 86.5955,75.5073 86.8534,75.19 C 87.1112,74.8727 87.4821,74.714 87.966,74.714 C 88.1326,74.714 88.2833,74.7338 88.4182,74.7735 C 88.5531,74.8132 88.6701,74.8608 88.7693,74.9163 C 88.8684,74.9718 88.9517,75.0274 89.0192,75.0829 C 89.0866,75.1384 89.1362,75.1821 89.1679,75.2138 L 89.5249,74.5355 C 89.4852,74.4958 89.4257,74.4383 89.3464,74.363 C 89.2671,74.2876 89.16,74.2122 89.0251,74.1368 C 88.8902,74.0615 88.7236,73.996 88.5253,73.9405 C 88.327,73.885 88.0929,73.8572 87.8232,73.8572 C 87.4662,73.8572 87.1429,73.9167 86.8534,74.0357 C 86.5638,74.1547 86.3179,74.3392 86.1156,74.5891 C 85.9133,74.839 85.7566,75.1563 85.6455,75.5411 C 85.5344,75.9258 85.4789,76.3879 85.4789,76.9274 C 85.4789,77.4351 85.5364,77.8735 85.6515,78.2424 C 85.7665,78.6113 85.9232,78.9147 86.1215,79.1527 C 86.3198,79.3907 86.5499,79.5672 86.8117,79.6823 C 87.0735,79.7973 87.3551,79.8548 87.6566,79.8548 C 88.204,79.8548 88.6324,79.6823 88.9418,79.3372 C 89.2512,78.9921 89.4059,78.4744 89.4059,77.7842 z
				M 87.5971,79.0694 C 87.256,79.0694 86.9823,78.9266 86.776,78.641 C 86.5697,78.3554 86.4507,77.9429 86.419,77.4034 L 88.5015,77.4034 C 88.5094,77.4431 88.5154,77.5006 88.5194,77.576 C 88.5233,77.6513 88.5253,77.7326 88.5253,77.8199 C 88.5253,78.2166 88.446,78.524 88.2873,78.7422 C 88.1286,78.9603 87.8986,79.0694 87.5971,79.0694 z
				M 93.1544,78.5577 C 93.0909,78.6291 92.9759,78.7263 92.8093,78.8493 C 92.6427,78.9722 92.4245,79.0337 92.1548,79.0337 C 91.9009,79.0337 91.7066,78.9742 91.5717,78.8552 C 91.4368,78.7362 91.3694,78.5934 91.3694,78.4268 C 91.3694,78.2126 91.4309,78.0361 91.5539,77.8973 C 91.6768,77.7584 91.8652,77.6097 92.1191,77.451 L 92.4761,77.2368 C 92.8648,77.0067 93.1703,76.7588 93.3924,76.4931 C 93.6145,76.2273 93.7256,75.8842 93.7256,75.4637 C 93.7256,75.0115 93.5689,74.6307 93.2556,74.3213 C 92.9422,74.0119 92.492,73.8572 91.9049,73.8572 C 91.6748,73.8572 91.4725,73.881 91.298,73.9286 C 91.1235,73.9762 90.9707,74.0317 90.8399,74.0952 C 90.709,74.1587 90.5999,74.2281 90.5126,74.3034 C 90.4253,74.3788 90.3539,74.4482 90.2984,74.5117 L 90.7625,75.2733 C 90.8101,75.2257 90.8676,75.1702 90.9351,75.1067 C 91.0025,75.0432 91.0838,74.9818 91.179,74.9223 C 91.2742,74.8628 91.3813,74.8132 91.5003,74.7735 C 91.6193,74.7338 91.7581,74.714 91.9168,74.714 C 92.2024,74.714 92.4206,74.7775 92.5713,74.9044 C 92.722,75.0313 92.7974,75.186 92.7974,75.3685 C 92.7974,75.5034 92.7796,75.6204 92.7439,75.7196 C 92.7082,75.8187 92.6546,75.908 92.5832,75.9873 C 92.5118,76.0666 92.4245,76.142 92.3214,76.2134 C 92.2183,76.2848 92.0993,76.3641 91.9644,76.4514 L 91.6074,76.6775 C 91.2504,76.9076 90.9707,77.1495 90.7685,77.4034 C 90.5662,77.6573 90.465,77.9825 90.465,78.3792 C 90.465,78.5934 90.5067,78.7898 90.59,78.9683 C 90.6733,79.1467 90.7903,79.3014 90.941,79.4324 C 91.0917,79.5633 91.2683,79.6664 91.4706,79.7418 C 91.6729,79.8171 91.889,79.8548 92.1191,79.8548 C 92.3412,79.8548 92.5316,79.833 92.6903,79.7894 C 92.849,79.7457 92.9858,79.6902 93.1009,79.6228 C 93.2159,79.5553 93.3111,79.4879 93.3865,79.4205 C 93.4618,79.353 93.5233,79.2955 93.5709,79.2479 L 93.1544,78.5577 z
				M 97.8549,74 L 97.8549,77.6771 C 97.8549,78.1452 97.7875,78.4823 97.6526,78.6886 C 97.5177,78.8949 97.2996,78.998 96.9981,78.998 C 96.8394,78.998 96.6986,78.9782 96.5757,78.9385 C 96.4527,78.8988 96.3436,78.8493 96.2484,78.7898 C 96.1532,78.7303 96.0699,78.6648 95.9985,78.5934 C 95.9271,78.522 95.8676,78.4585 95.82,78.403 L 95.82,74 L 94.8561,74 L 94.8561,79.712 L 95.7367,79.712 L 95.7367,79.0694 L 95.7605,79.0694 C 95.8002,79.1329 95.8597,79.2102 95.939,79.3014 C 96.0183,79.3927 96.1175,79.48 96.2365,79.5633 C 96.3555,79.6466 96.4943,79.716 96.653,79.7715 C 96.8117,79.827 96.9902,79.8548 97.1885,79.8548 C 97.839,79.8548 98.2992,79.6009 98.5689,79.0932 C 98.6244,79.1725 98.6998,79.2578 98.795,79.3491 C 98.8902,79.4403 99.0013,79.5236 99.1282,79.599 C 99.2551,79.6743 99.3979,79.7358 99.5566,79.7834 C 99.7153,79.831 99.8898,79.8548 100.0802,79.8548 C 101.2385,79.8548 101.8176,79.1805 101.8176,77.8318 L 101.8176,74 L 100.8537,74 L 100.8537,77.6771 C 100.8537,78.1452 100.7704,78.4823 100.6038,78.6886 C 100.4372,78.8949 100.1913,78.998 99.866,78.998 C 99.5963,78.998 99.3722,78.9325 99.1937,78.8017 C 99.0152,78.6707 98.8743,78.5458 98.7712,78.4268 C 98.7871,78.3395 98.799,78.2463 98.8069,78.1471 C 98.8148,78.048 98.8188,77.9429 98.8188,77.8318 L 98.8188,74 L 97.8549,74 z
				M 104.2214,74 L 103.2575,74 L 103.2575,79.712 L 104.2214,79.712 L 104.2214,74 z
				M 103.7454,81.0924 C 103.5471,81.0924 103.3884,81.1559 103.2694,81.2828 C 103.1504,81.4097 103.0909,81.5763 103.0909,81.7826 C 103.0909,81.9809 103.1504,82.1436 103.2694,82.2705 C 103.3884,82.3974 103.5471,82.4609 103.7454,82.4609 C 103.9358,82.4609 104.0905,82.3974 104.2095,82.2705 C 104.3285,82.1436 104.388,81.9809 104.388,81.7826 C 104.388,81.5763 104.3285,81.4097 104.2095,81.2828 C 104.0905,81.1559 103.9358,81.0924 103.7454,81.0924 z
				M 108.8148,74 L 108.8148,77.6771 C 108.8148,78.161 108.7335,78.5081 108.5709,78.7184 C 108.4082,78.9286 108.1603,79.0337 107.8271,79.0337 C 107.5415,79.0337 107.3035,78.9623 107.1131,78.8195 C 106.9227,78.6767 106.772,78.5379 106.6609,78.403 L 106.6609,74 L 105.697,74 L 105.697,79.712 L 106.5776,79.712 L 106.5776,79.0694 L 106.6014,79.0694 C 106.6252,79.117 106.6768,79.1864 106.7561,79.2777 C 106.8354,79.3689 106.9386,79.4562 107.0655,79.5395 C 107.1924,79.6228 107.3432,79.6961 107.5177,79.7596 C 107.6922,79.8231 107.8906,79.8548 108.1127,79.8548 C 108.3666,79.8548 108.5966,79.8171 108.8029,79.7418 C 109.0092,79.6664 109.1837,79.5454 109.3265,79.3788 C 109.4693,79.2122 109.5804,78.996 109.6597,78.7303 C 109.739,78.4645 109.7787,78.1372 109.7787,77.7485 L 109.7787,74 L 108.8148,74 z
				M 112.1825,74 L 111.2186,74 L 111.2186,79.712 L 112.1825,79.712 L 112.1825,74 z
				M 111.7065,81.0924 C 111.5082,81.0924 111.3495,81.1559 111.2305,81.2828 C 111.1115,81.4097 111.052,81.5763 111.052,81.7826 C 111.052,81.9809 111.1115,82.1436 111.2305,82.2705 C 111.3495,82.3974 111.5082,82.4609 111.7065,82.4609 C 111.8969,82.4609 112.0516,82.3974 112.1706,82.2705 C 112.2896,82.1436 112.3491,81.9809 112.3491,81.7826 C 112.3491,81.5763 112.2896,81.4097 112.1706,81.2828 C 112.0516,81.1559 111.8969,81.0924 111.7065,81.0924 z
				M 116.1214,78.5577 C 116.0579,78.6291 115.9429,78.7263 115.7763,78.8493 C 115.6097,78.9722 115.3915,79.0337 115.1218,79.0337 C 114.8679,79.0337 114.6736,78.9742 114.5387,78.8552 C 114.4038,78.7362 114.3364,78.5934 114.3364,78.4268 C 114.3364,78.2126 114.3979,78.0361 114.5209,77.8973 C 114.6438,77.7584 114.8322,77.6097 115.0861,77.451 L 115.4431,77.2368 C 115.8318,77.0067 116.1373,76.7588 116.3594,76.4931 C 116.5815,76.2273 116.6926,75.8842 116.6926,75.4637 C 116.6926,75.0115 116.5359,74.6307 116.2226,74.3213 C 115.9092,74.0119 115.459,73.8572 114.8719,73.8572 C 114.6418,73.8572 114.4395,73.881 114.265,73.9286 C 114.0905,73.9762 113.9377,74.0317 113.8069,74.0952 C 113.676,74.1587 113.5669,74.2281 113.4796,74.3034 C 113.3923,74.3788 113.3209,74.4482 113.2654,74.5117 L 113.7295,75.2733 C 113.7771,75.2257 113.8346,75.1702 113.9021,75.1067 C 113.9695,75.0432 114.0508,74.9818 114.146,74.9223 C 114.2412,74.8628 114.3483,74.8132 114.4673,74.7735 C 114.5863,74.7338 114.7251,74.714 114.8838,74.714 C 115.1694,74.714 115.3876,74.7775 115.5383,74.9044 C 115.689,75.0313 115.7644,75.186 115.7644,75.3685 C 115.7644,75.5034 115.7466,75.6204 115.7109,75.7196 C 115.6752,75.8187 115.6216,75.908 115.5502,75.9873 C 115.4788,76.0666 115.3915,76.142 115.2884,76.2134 C 115.1853,76.2848 115.0663,76.3641 114.9314,76.4514 L 114.5744,76.6775 C 114.2174,76.9076 113.9377,77.1495 113.7355,77.4034 C 113.5332,77.6573 113.432,77.9825 113.432,78.3792 C 113.432,78.5934 113.4737,78.7898 113.557,78.9683 C 113.6403,79.1467 113.7573,79.3014 113.908,79.4324 C 114.0587,79.5633 114.2353,79.6664 114.4376,79.7418 C 114.6399,79.8171 114.856,79.8548 115.0861,79.8548 C 115.3082,79.8548 115.4986,79.833 115.6573,79.7894 C 115.816,79.7457 115.9528,79.6902 116.0679,79.6228 C 116.1829,79.5553 116.2781,79.4879 116.3535,79.4205 C 116.4288,79.353 116.4903,79.2955 116.5379,79.2479 L 116.1214,78.5577 z
				M 120.2626,78.9266 L 119.0131,78.9266 L 119.0131,75.7612 C 119.0131,75.3566 119.0647,75.0809 119.1678,74.9342 C 119.2709,74.7874 119.4455,74.714 119.6914,74.714 C 119.8342,74.714 119.9572,74.7338 120.0603,74.7735 C 120.1634,74.8132 120.2388,74.8489 120.2864,74.8806 L 120.4173,74.1071 C 120.3776,74.0754 120.2824,74.0258 120.1317,73.9583 C 119.981,73.8909 119.7787,73.8572 119.5248,73.8572 C 119.0329,73.8572 118.664,73.994 118.4181,74.2678 C 118.1722,74.5414 118.0492,74.9956 118.0492,75.6303 L 118.0492,78.9266 L 117.359,78.9266 L 117.359,79.5692 L 118.0492,79.712 L 118.1563,81.3066 L 119.0131,81.3066 L 119.0131,79.712 L 120.3816,79.712 L 120.2626,78.9266 z
				M 124.9393,77.7842 C 124.9393,77.5383 124.9314,77.3261 124.9155,77.1476 C 124.8996,76.9691 124.8838,76.8124 124.8679,76.6775 L 121.9524,76.6775 C 121.9841,76.0032 122.1289,75.5073 122.3868,75.19 C 122.6446,74.8727 123.0155,74.714 123.4994,74.714 C 123.666,74.714 123.8167,74.7338 123.9516,74.7735 C 124.0865,74.8132 124.2035,74.8608 124.3027,74.9163 C 124.4018,74.9718 124.4851,75.0274 124.5526,75.0829 C 124.62,75.1384 124.6696,75.1821 124.7013,75.2138 L 125.0583,74.5355 C 125.0186,74.4958 124.9591,74.4383 124.8798,74.363 C 124.8005,74.2876 124.6934,74.2122 124.5585,74.1368 C 124.4236,74.0615 124.257,73.996 124.0587,73.9405 C 123.8604,73.885 123.6263,73.8572 123.3566,73.8572 C 122.9996,73.8572 122.6763,73.9167 122.3868,74.0357 C 122.0972,74.1547 121.8513,74.3392 121.649,74.5891 C 121.4467,74.839 121.29,75.1563 121.1789,75.5411 C 121.0678,75.9258 121.0123,76.3879 121.0123,76.9274 C 121.0123,77.4351 121.0698,77.8735 121.1849,78.2424 C 121.2999,78.6113 121.4566,78.9147 121.6549,79.1527 C 121.8532,79.3907 122.0833,79.5672 122.3451,79.6823 C 122.6069,79.7973 122.8885,79.8548 123.19,79.8548 C 123.7374,79.8548 124.1658,79.6823 124.4752,79.3372 C 124.7846,78.9921 124.9393,78.4744 124.9393,77.7842 z
				M 123.1305,79.0694 C 122.7894,79.0694 122.5157,78.9266 122.3094,78.641 C 122.1031,78.3554 121.9841,77.9429 121.9524,77.4034 L 124.0349,77.4034 C 124.0428,77.4431 124.0488,77.5006 124.0528,77.576 C 124.0567,77.6513 124.0587,77.7326 124.0587,77.8199 C 124.0587,78.2166 123.9794,78.524 123.8207,78.7422 C 123.662,78.9603 123.432,79.0694 123.1305,79.0694 z
				M 128.7354,78.8671 C 128.7116,78.883 128.66,78.9028 128.5807,78.9266 C 128.5014,78.9504 128.3943,78.9623 128.2594,78.9623 C 127.9579,78.9623 127.7219,78.881 127.5514,78.7184 C 127.3808,78.5557 127.2598,78.3792 127.1884,78.1888 L 127.1884,74 L 126.2245,74 L 126.2245,79.712 L 127.1051,79.712 L 127.1051,78.9385 L 127.1289,78.9385 C 127.1686,79.0496 127.2201,79.1587 127.2836,79.2658 C 127.3471,79.3729 127.4264,79.4681 127.5216,79.5514 C 127.6168,79.6347 127.7298,79.7001 127.8607,79.7477 C 127.9917,79.7953 128.1483,79.8191 128.3308,79.8191 C 128.4657,79.8191 128.5748,79.8072 128.6581,79.7834 C 128.7414,79.7596 128.8068,79.7398 128.8544,79.7239 L 128.7354,78.8671 z
				M 130.6513,74 L 129.6874,74 L 129.6874,79.712 L 130.6513,79.712 L 130.6513,74 z
				M 130.1753,81.0924 C 129.977,81.0924 129.8183,81.1559 129.6993,81.2828 C 129.5803,81.4097 129.5208,81.5763 129.5208,81.7826 C 129.5208,81.9809 129.5803,82.1436 129.6993,82.2705 C 129.8183,82.3974 129.977,82.4609 130.1753,82.4609 C 130.3657,82.4609 130.5204,82.3974 130.6394,82.2705 C 130.7584,82.1436 130.8179,81.9809 130.8179,81.7826 C 130.8179,81.5763 130.7584,81.4097 130.6394,81.2828 C 130.5204,81.1559 130.3657,81.0924 130.1753,81.0924 z
				M 136.1253,74 L 135.2447,74 L 135.2447,74.6426 L 135.2209,74.6426 C 135.1971,74.595 135.1455,74.5256 135.0662,74.4344 C 134.9869,74.3431 134.8857,74.2559 134.7628,74.1726 C 134.6398,74.0893 134.491,74.0159 134.3165,73.9524 C 134.142,73.8889 133.9476,73.8572 133.7334,73.8572 C 133.4795,73.8572 133.2515,73.8949 133.0492,73.9702 C 132.8469,74.0456 132.6743,74.1666 132.5315,74.3332 C 132.3887,74.4998 132.2796,74.716 132.2043,74.9818 C 132.1289,75.2475 132.0912,75.5748 132.0912,75.9635 L 132.0912,79.712 L 133.0551,79.712 L 133.0551,76.0349 C 133.0551,75.5589 133.1325,75.2198 133.2872,75.0174 C 133.4419,74.8152 133.6818,74.714 134.0071,74.714 C 134.2848,74.714 134.5188,74.7834 134.7092,74.9223 C 134.8996,75.0611 135.0503,75.1979 135.1614,75.3328 L 135.1614,79.712 L 136.1253,79.712 L 136.1253,74 z
				M 140.5997,74 L 140.5997,77.6771 C 140.5997,78.1452 140.5323,78.4823 140.3974,78.6886 C 140.2625,78.8949 140.0444,78.998 139.7429,78.998 C 139.5842,78.998 139.4434,78.9782 139.3205,78.9385 C 139.1975,78.8988 139.0884,78.8493 138.9932,78.7898 C 138.898,78.7303 138.8147,78.6648 138.7433,78.5934 C 138.6719,78.522 138.6124,78.4585 138.5648,78.403 L 138.5648,74 L 137.6009,74 L 137.6009,79.712 L 138.4815,79.712 L 138.4815,79.0694 L 138.5053,79.0694 C 138.545,79.1329 138.6045,79.2102 138.6838,79.3014 C 138.7631,79.3927 138.8623,79.48 138.9813,79.5633 C 139.1003,79.6466 139.2391,79.716 139.3978,79.7715 C 139.5565,79.827 139.735,79.8548 139.9333,79.8548 C 140.5838,79.8548 141.044,79.6009 141.3137,79.0932 C 141.3692,79.1725 141.4446,79.2578 141.5398,79.3491 C 141.635,79.4403 141.7461,79.5236 141.873,79.599 C 141.9999,79.6743 142.1427,79.7358 142.3014,79.7834 C 142.4601,79.831 142.6346,79.8548 142.825,79.8548 C 143.9833,79.8548 144.5624,79.1805 144.5624,77.8318 L 144.5624,74 L 143.5985,74 L 143.5985,77.6771 C 143.5985,78.1452 143.5152,78.4823 143.3486,78.6886 C 143.182,78.8949 142.9361,78.998 142.6108,78.998 C 142.3411,78.998 142.117,78.9325 141.9385,78.8017 C 141.76,78.6707 141.6191,78.5458 141.516,78.4268 C 141.5319,78.3395 141.5438,78.2463 141.5517,78.1471 C 141.5596,78.048 141.5636,77.9429 141.5636,77.8318 L 141.5636,74 L 140.5997,74 z
				M 62.976,64.7727 C 62.976,65.3518 63.0514,65.8358 63.2021,66.2245 C 63.3528,66.6132 63.5472,66.9266 63.7852,67.1646 C 64.0232,67.4026 64.2929,67.5712 64.5944,67.6704 C 64.8959,67.7695 65.1973,67.8191 65.4988,67.8191 C 65.6813,67.8191 65.8399,67.8052 65.9748,67.7774 C 66.1097,67.7497 66.2207,67.716 66.308,67.6763 L 66.308,70.4133 L 67.2719,70.5204 L 67.2719,62 L 66.3913,62 L 66.3913,62.6069 L 66.3675,62.6069 C 66.3437,62.5593 66.3001,62.4939 66.2366,62.4106 C 66.1731,62.3273 66.0859,62.244 65.9748,62.1607 C 65.8637,62.0774 65.7249,62.006 65.5583,61.9464 C 65.3917,61.8869 65.1973,61.8572 64.9752,61.8572 C 64.7055,61.8572 64.4496,61.9107 64.2077,62.0179 C 63.9657,62.125 63.7535,62.2955 63.571,62.5296 C 63.3885,62.7636 63.2438,63.0651 63.1367,63.434 C 63.0296,63.8029 62.976,64.2491 62.976,64.7727 z
				M 65.237,62.714 C 65.3877,62.714 65.5226,62.7338 65.6416,62.7735 C 65.7606,62.8132 65.8637,62.8628 65.951,62.9223 C 66.0383,62.9818 66.1117,63.0432 66.1712,63.1067 C 66.2307,63.1702 66.2763,63.2257 66.308,63.2733 L 66.308,66.7957 C 66.2207,66.8512 66.1196,66.8988 66.0046,66.9385 C 65.8895,66.9782 65.7447,66.998 65.5702,66.998 C 65.3481,66.998 65.1398,66.9603 64.9455,66.885 C 64.7511,66.8096 64.5825,66.6846 64.4397,66.5101 C 64.2969,66.3356 64.1839,66.1095 64.1006,65.8318 C 64.0173,65.5541 63.9756,65.213 63.9756,64.8084 C 63.9756,64.4117 64.0093,64.0805 64.0768,63.8148 C 64.1442,63.549 64.2374,63.3348 64.3564,63.1722 C 64.4754,63.0095 64.6103,62.8925 64.761,62.8211 C 64.9117,62.7497 65.0704,62.714 65.237,62.714 z
				M 72.4127,65.7842 C 72.4127,65.5383 72.4048,65.3261 72.3889,65.1476 C 72.373,64.9691 72.3572,64.8124 72.3413,64.6775 L 69.4258,64.6775 C 69.4575,64.0032 69.6023,63.5073 69.8602,63.19 C 70.118,62.8727 70.4889,62.714 70.9728,62.714 C 71.1394,62.714 71.2901,62.7338 71.425,62.7735 C 71.5599,62.8132 71.6769,62.8608 71.7761,62.9163 C 71.8752,62.9718 71.9585,63.0274 72.026,63.0829 C 72.0934,63.1384 72.143,63.1821 72.1747,63.2138 L 72.5317,62.5355 C 72.492,62.4958 72.4325,62.4383 72.3532,62.363 C 72.2739,62.2876 72.1668,62.2122 72.0319,62.1368 C 71.897,62.0615 71.7304,61.996 71.5321,61.9405 C 71.3338,61.885 71.0997,61.8572 70.83,61.8572 C 70.473,61.8572 70.1497,61.9167 69.8602,62.0357 C 69.5706,62.1547 69.3247,62.3392 69.1224,62.5891 C 68.9201,62.839 68.7634,63.1563 68.6523,63.5411 C 68.5412,63.9258 68.4857,64.3879 68.4857,64.9274 C 68.4857,65.4351 68.5432,65.8735 68.6583,66.2424 C 68.7733,66.6113 68.93,66.9147 69.1283,67.1527 C 69.3266,67.3907 69.5567,67.5672 69.8185,67.6823 C 70.0803,67.7973 70.3619,67.8548 70.6634,67.8548 C 71.2108,67.8548 71.6392,67.6823 71.9486,67.3372 C 72.258,66.9921 72.4127,66.4744 72.4127,65.7842 z
				M 70.6039,67.0694 C 70.2628,67.0694 69.9891,66.9266 69.7828,66.641 C 69.5765,66.3554 69.4575,65.9429 69.4258,65.4034 L 71.5083,65.4034 C 71.5162,65.4431 71.5222,65.5006 71.5262,65.576 C 71.5301,65.6513 71.5321,65.7326 71.5321,65.8199 C 71.5321,66.2166 71.4528,66.524 71.2941,66.7422 C 71.1354,66.9603 70.9054,67.0694 70.6039,67.0694 z
				M 76.2088,66.8671 C 76.185,66.883 76.1334,66.9028 76.0541,66.9266 C 75.9748,66.9504 75.8677,66.9623 75.7328,66.9623 C 75.4313,66.9623 75.1953,66.881 75.0248,66.7184 C 74.8542,66.5557 74.7332,66.3792 74.6618,66.1888 L 74.6618,62 L 73.6979,62 L 73.6979,67.712 L 74.5785,67.712 L 74.5785,66.9385 L 74.6023,66.9385 C 74.642,67.0496 74.6935,67.1587 74.757,67.2658 C 74.8205,67.3729 74.8998,67.4681 74.995,67.5514 C 75.0902,67.6347 75.2032,67.7001 75.3341,67.7477 C 75.4651,67.7953 75.6217,67.8191 75.8042,67.8191 C 75.9391,67.8191 76.0482,67.8072 76.1315,67.7834 C 76.2148,67.7596 76.2802,67.7398 76.3278,67.7239 L 76.2088,66.8671 z
				M 79.6122,62 L 79.6122,70.211 L 83.6463,70.211 L 83.5749,69.3899 L 80.6475,69.3899 L 80.6475,66.3554 L 83.3488,66.3554 L 83.3488,65.5343 L 80.6475,65.5343 L 80.6475,62 L 79.6122,62 z
				M 85.6812,62 L 84.7173,62 L 84.7173,67.712 L 85.6812,67.712 L 85.6812,62 z
				M 85.2052,69.0924 C 85.0069,69.0924 84.8482,69.1559 84.7292,69.2828 C 84.6102,69.4097 84.5507,69.5763 84.5507,69.7826 C 84.5507,69.9809 84.6102,70.1436 84.7292,70.2705 C 84.8482,70.3974 85.0069,70.4609 85.2052,70.4609 C 85.3956,70.4609 85.5503,70.3974 85.6693,70.2705 C 85.7883,70.1436 85.8478,69.9809 85.8478,69.7826 C 85.8478,69.5763 85.7883,69.4097 85.6693,69.2828 C 85.5503,69.1559 85.3956,69.0924 85.2052,69.0924 z
				M 90.2746,62 L 90.2746,65.6771 C 90.2746,66.161 90.1933,66.5081 90.0307,66.7184 C 89.868,66.9286 89.6201,67.0337 89.2869,67.0337 C 89.0013,67.0337 88.7633,66.9623 88.5729,66.8195 C 88.3825,66.6767 88.2318,66.5379 88.1207,66.403 L 88.1207,62 L 87.1568,62 L 87.1568,67.712 L 88.0374,67.712 L 88.0374,67.0694 L 88.0612,67.0694 C 88.085,67.117 88.1366,67.1864 88.2159,67.2777 C 88.2952,67.3689 88.3984,67.4562 88.5253,67.5395 C 88.6522,67.6228 88.803,67.6961 88.9775,67.7596 C 89.152,67.8231 89.3504,67.8548 89.5725,67.8548 C 89.8264,67.8548 90.0564,67.8171 90.2627,67.7418 C 90.469,67.6664 90.6435,67.5454 90.7863,67.3788 C 90.9291,67.2122 91.0402,66.996 91.1195,66.7303 C 91.1988,66.4645 91.2385,66.1372 91.2385,65.7485 L 91.2385,62 L 90.2746,62 z
				M 92.3452,63.4518 C 92.3452,63.785 92.4087,64.0627 92.5356,64.2848 C 92.6625,64.5069 92.8331,64.6874 93.0473,64.8263 C 93.2615,64.9651 93.5134,65.0643 93.803,65.1238 C 94.0925,65.1833 94.3999,65.213 94.7252,65.213 L 95.0227,65.213 L 95.0227,65.7604 C 95.0227,66.2443 94.9374,66.5775 94.7669,66.76 C 94.5963,66.9425 94.3563,67.0337 94.0469,67.0337 C 93.7613,67.0337 93.5233,66.9722 93.3329,66.8493 C 93.1425,66.7263 92.9918,66.6172 92.8807,66.522 L 92.4761,67.1646 C 92.5396,67.2281 92.6209,67.2995 92.7201,67.3788 C 92.8192,67.4581 92.9402,67.5335 93.083,67.6049 C 93.2258,67.6763 93.3884,67.7358 93.5709,67.7834 C 93.7534,67.831 93.9596,67.8548 94.1897,67.8548 C 94.7768,67.8548 95.221,67.6922 95.5225,67.3669 C 95.824,67.0416 95.9747,66.518 95.9747,65.7961 L 95.9747,63.19 C 95.9747,62.9441 95.9826,62.7041 95.9985,62.4701 C 96.0144,62.236 96.0302,62.0793 96.0461,62 L 95.1298,62 L 95.0941,62.6307 L 95.0703,62.6307 C 95.0386,62.5593 94.991,62.478 94.9275,62.3868 C 94.864,62.2955 94.7847,62.2122 94.6895,62.1368 C 94.5943,62.0615 94.4793,61.996 94.3444,61.9405 C 94.2095,61.885 94.0509,61.8572 93.8684,61.8572 C 93.6542,61.8572 93.4539,61.8969 93.2675,61.9762 C 93.081,62.0555 92.9184,62.1666 92.7796,62.3094 C 92.6407,62.4522 92.5336,62.6208 92.4583,62.8152 C 92.3829,63.0095 92.3452,63.2217 92.3452,63.4518 z
				M 94.0707,62.6783 C 94.2056,62.6783 94.3246,62.6981 94.4277,62.7378 C 94.5308,62.7775 94.6201,62.8251 94.6955,62.8806 C 94.7708,62.9361 94.8343,62.9976 94.8859,63.0651 C 94.9374,63.1325 94.983,63.19 95.0227,63.2376 L 95.0227,64.499 L 94.7133,64.4871 C 94.2532,64.4712 93.9041,64.3919 93.6661,64.2491 C 93.4281,64.1063 93.3091,63.8762 93.3091,63.5589 C 93.3091,63.2654 93.3765,63.0452 93.5114,62.8985 C 93.6463,62.7517 93.8327,62.6783 94.0707,62.6783 z
				M 100.5443,62 L 100.5443,65.6771 C 100.5443,66.161 100.463,66.5081 100.3004,66.7184 C 100.1377,66.9286 99.8898,67.0337 99.5566,67.0337 C 99.271,67.0337 99.033,66.9623 98.8426,66.8195 C 98.6522,66.6767 98.5015,66.5379 98.3904,66.403 L 98.3904,62 L 97.4265,62 L 97.4265,67.712 L 98.3071,67.712 L 98.3071,67.0694 L 98.3309,67.0694 C 98.3547,67.117 98.4063,67.1864 98.4856,67.2777 C 98.5649,67.3689 98.6681,67.4562 98.795,67.5395 C 98.9219,67.6228 99.0727,67.6961 99.2472,67.7596 C 99.4217,67.8231 99.6201,67.8548 99.8422,67.8548 C 100.0961,67.8548 100.3261,67.8171 100.5324,67.7418 C 100.7387,67.6664 100.9132,67.5454 101.056,67.3788 C 101.1988,67.2122 101.3099,66.996 101.3892,66.7303 C 101.4685,66.4645 101.5082,66.1372 101.5082,65.7485 L 101.5082,62 L 100.5443,62 z
				M 106.1373,67.0932 L 103.8287,62.8449 L 103.8287,62.8211 L 106.292,62.8211 L 106.2087,62 L 102.5792,62 L 102.5792,62.6188 L 104.9592,66.9028 L 104.9592,66.9266 L 102.7101,66.9266 L 102.7101,67.712 L 106.1373,67.712 L 106.1373,67.0932 z
				M 110.9568,65.7842 C 110.9568,65.5383 110.9489,65.3261 110.933,65.1476 C 110.9171,64.9691 110.9013,64.8124 110.8854,64.6775 L 107.9699,64.6775 C 108.0016,64.0032 108.1464,63.5073 108.4043,63.19 C 108.6621,62.8727 109.033,62.714 109.5169,62.714 C 109.6835,62.714 109.8342,62.7338 109.9691,62.7735 C 110.104,62.8132 110.221,62.8608 110.3202,62.9163 C 110.4193,62.9718 110.5026,63.0274 110.5701,63.0829 C 110.6375,63.1384 110.6871,63.1821 110.7188,63.2138 L 111.0758,62.5355 C 111.0361,62.4958 110.9766,62.4383 110.8973,62.363 C 110.818,62.2876 110.7109,62.2122 110.576,62.1368 C 110.4411,62.0615 110.2745,61.996 110.0762,61.9405 C 109.8779,61.885 109.6438,61.8572 109.3741,61.8572 C 109.0171,61.8572 108.6938,61.9167 108.4043,62.0357 C 108.1147,62.1547 107.8688,62.3392 107.6665,62.5891 C 107.4642,62.839 107.3075,63.1563 107.1964,63.5411 C 107.0853,63.9258 107.0298,64.3879 107.0298,64.9274 C 107.0298,65.4351 107.0873,65.8735 107.2024,66.2424 C 107.3174,66.6113 107.4741,66.9147 107.6724,67.1527 C 107.8707,67.3907 108.1008,67.5672 108.3626,67.6823 C 108.6244,67.7973 108.906,67.8548 109.2075,67.8548 C 109.7549,67.8548 110.1833,67.6823 110.4927,67.3372 C 110.8021,66.9921 110.9568,66.4744 110.9568,65.7842 z
				M 109.148,67.0694 C 108.8069,67.0694 108.5332,66.9266 108.3269,66.641 C 108.1206,66.3554 108.0016,65.9429 107.9699,65.4034 L 110.0524,65.4034 C 110.0603,65.4431 110.0663,65.5006 110.0703,65.576 C 110.0742,65.6513 110.0762,65.7326 110.0762,65.8199 C 110.0762,66.2166 109.9969,66.524 109.8382,66.7422 C 109.6795,66.9603 109.4495,67.0694 109.148,67.0694 z
				M 115.3598,62 L 115.3598,65.6771 C 115.3598,66.161 115.2785,66.5081 115.1159,66.7184 C 114.9532,66.9286 114.7053,67.0337 114.3721,67.0337 C 114.0865,67.0337 113.8485,66.9623 113.6581,66.8195 C 113.4677,66.6767 113.317,66.5379 113.2059,66.403 L 113.2059,62 L 112.242,62 L 112.242,67.712 L 113.1226,67.712 L 113.1226,67.0694 L 113.1464,67.0694 C 113.1702,67.117 113.2218,67.1864 113.3011,67.2777 C 113.3804,67.3689 113.4836,67.4562 113.6105,67.5395 C 113.7374,67.6228 113.8882,67.6961 114.0627,67.7596 C 114.2372,67.8231 114.4356,67.8548 114.6577,67.8548 C 114.9116,67.8548 115.1416,67.8171 115.3479,67.7418 C 115.5542,67.6664 115.7287,67.5454 115.8715,67.3788 C 116.0143,67.2122 116.1254,66.996 116.2047,66.7303 C 116.284,66.4645 116.3237,66.1372 116.3237,65.7485 L 116.3237,62 L 115.3598,62 z
				" fill="#000000"/>
				</g>
				<g id="Adler-und-Saeulenelement">
					<path d="M37.173,29.339 C37.2,29.115 37.216,28.884 37.216,28.648 C37.216,28.519 37.217,28.369 37.201,28.199 C39.194,28.171 40.942,26.735 40.942,25.084 C40.942,24.244 40.394,23.61 40.085,23.231 C40.154,23.216 40.224,23.2 40.295,23.183 C40.587,23.437 41.415,24.339 41.415,25.478 C41.415,27.459 39.435,29.298 37.173,29.339 M35.165,22.44 C35.128,22.219 35.044,22.019 34.916,21.847 C34.923,21.645 35.006,21.452 35.331,21.611 C35.155,21.791 35.291,22.11 35.291,22.11 C35.291,22.11 35.651,21.943 35.576,21.705 C36.11,21.833 35.726,22.55 35.165,22.44 M34.702,23.457 C34.631,23.161 34.479,22.857 34.286,22.628 C34.11,22.42 33.819,22.173 33.427,22.173 C33.248,22.173 32.948,22.257 32.757,22.338 C32.686,22.208 32.547,21.895 32.547,21.754 C32.547,21.609 32.792,21.462 33.261,21.462 C34.293,21.462 34.909,21.928 34.909,22.71 C34.909,22.985 34.8,23.235 34.702,23.457 M37.352,36.757 C37.472,36.757 37.53,36.776 37.6,36.802 C37.897,37.61 39.042,39.135 39.09,39.2 L39.1,39.214 L39.117,39.21 C39.398,39.165 40.115,39.057 40.715,39.057 L40.729,39.057 C40.794,39.057 40.868,39.057 40.915,39.103 C40.954,39.142 40.973,39.21 40.973,39.307 C40.973,39.456 40.91,39.711 40.834,39.82 C40.624,39.591 40.283,39.488 39.737,39.488 C39.573,39.488 39.379,39.537 39.274,39.565 L39.231,39.574 L39.182,39.587 L39.497,39.902 C39.983,40.388 40.403,40.807 40.403,41.086 C40.403,41.254 40.239,41.473 40.089,41.57 C40.056,41.059 39.54,40.375 39.037,39.992 L38.994,39.96 L38.986,40.14 C38.979,40.262 38.968,40.445 38.968,40.641 C38.968,41.614 38.869,41.762 38.532,41.762 C38.48,41.762 38.401,41.747 38.352,41.729 C38.542,41.494 38.617,41.184 38.617,40.64 L38.614,40.389 L38.611,40.187 C38.611,39.964 38.634,39.799 38.652,39.666 L38.662,39.591 L38.609,39.584 C38.451,39.562 38.158,39.522 37.934,39.522 C37.453,39.522 37.127,39.566 36.891,39.788 C36.735,39.662 36.575,39.445 36.575,39.308 C36.575,39.105 36.701,39.089 36.867,39.089 C36.951,39.089 37.029,39.101 37.137,39.114 C37.344,39.145 37.655,39.191 38.296,39.191 L38.336,39.191 L38.323,39.152 C38.161,38.687 37.715,38.011 37,37.142 C37.064,36.909 37.127,36.757 37.352,36.757 M31.178,39.152 L31.165,39.191 L31.205,39.191 C31.845,39.191 32.157,39.145 32.364,39.114 C32.472,39.101 32.55,39.089 32.634,39.089 C32.799,39.089 32.926,39.105 32.926,39.308 C32.926,39.445 32.766,39.662 32.611,39.788 C32.374,39.566 32.048,39.522 31.568,39.522 C31.343,39.522 31.049,39.562 30.892,39.584 L30.867,39.587 L30.839,39.591 L30.848,39.666 C30.867,39.799 30.89,39.964 30.89,40.187 L30.887,40.389 L30.884,40.64 C30.884,41.184 30.959,41.494 31.15,41.729 C31.1,41.747 31.021,41.762 30.969,41.762 C30.631,41.762 30.533,41.614 30.533,40.641 C30.533,40.445 30.523,40.262 30.516,40.14 L30.506,39.959 L30.464,39.992 C29.962,40.375 29.444,41.059 29.413,41.57 C29.262,41.473 29.098,41.254 29.098,41.086 C29.098,40.807 29.518,40.388 30.004,39.902 L30.283,39.623 L30.319,39.587 L30.227,39.565 C30.122,39.537 29.928,39.488 29.763,39.488 C29.218,39.488 28.878,39.591 28.667,39.82 C28.591,39.711 28.528,39.456 28.528,39.307 C28.528,39.21 28.547,39.142 28.586,39.103 C28.633,39.057 28.707,39.057 28.772,39.057 L28.786,39.057 C29.386,39.057 30.104,39.165 30.384,39.21 L30.401,39.214 L30.411,39.2 C30.46,39.135 31.604,37.61 31.902,36.802 C31.97,36.776 32.029,36.757 32.149,36.757 C32.374,36.757 32.437,36.909 32.502,37.142 C31.786,38.011 31.34,38.687 31.178,39.152 M28.086,25.478 C28.086,24.339 28.915,23.437 29.207,23.183 C29.277,23.2 29.347,23.216 29.417,23.231 C29.107,23.61 28.559,24.244 28.559,25.084 C28.559,26.752 30.341,28.2 32.359,28.2 C32.346,28.343 32.339,28.493 32.339,28.648 C32.339,28.894 32.353,29.123 32.377,29.339 C30.095,29.325 28.086,27.473 28.086,25.478 M43.392,28.991 C44.416,30.61 45.217,30.583 46.427,30.583 C45.426,29.816 44.764,28.833 44.448,28.331 L42.578,25.339 C42.396,24.415 41.918,23.551 41.202,22.908 C41.443,22.817 41.643,22.721 41.763,22.63 C40.542,22.63 39.332,22.01 38.666,22.01 C38.238,22.01 37.963,22.266 37.963,22.604 C37.99,22.981 38.378,23.364 39.095,23.364 C39.257,23.364 39.465,23.343 39.693,23.305 C40.081,23.846 40.394,24.335 40.394,25.033 C40.394,26.343 38.828,27.364 37.247,27.364 C37.157,27.364 37.072,27.36 36.983,27.354 C36.84,27.029 36.363,26.484 36.363,25.864 C36.363,24.823 37.042,23.973 37.042,22.942 C37.042,22.301 36.73,21.904 36.61,21.739 C36.804,21.559 37.016,21.338 37.066,21.186 C36.953,21.235 36.819,21.241 36.624,21.241 C35.866,21.241 35.248,21.044 34.646,21.044 C34.302,21.044 34.21,21.15 34.21,21.251 C34.21,21.288 34.215,21.326 34.225,21.344 C34.097,21.294 33.977,21.261 33.834,21.235 C33.656,21.201 33.465,21.184 33.261,21.184 C32.529,21.184 32.269,21.491 32.269,21.754 C32.269,21.976 32.444,22.382 32.643,22.692 C32.928,22.548 33.271,22.451 33.427,22.451 C33.816,22.451 34.161,22.821 34.344,23.259 C34.083,23.291 34.033,23.302 33.769,23.302 C33.056,23.302 32.571,23.047 32.471,23.047 C32.462,23.047 32.443,23.052 32.443,23.068 C32.443,23.168 32.645,23.432 33.043,23.577 C33.568,23.769 34.354,23.849 34.485,23.871 C34.485,23.894 34.352,24.142 34.203,24.19 C34.172,24.2 34.147,24.201 34.11,24.193 C33.562,24.085 33.409,24.039 32.714,23.775 C32.693,23.767 32.68,23.78 32.68,23.802 C32.68,24.077 33.392,24.684 34.03,24.917 C33.497,25.597 32.832,26.293 32.518,27.354 C32.429,27.36 32.343,27.364 32.254,27.364 C30.673,27.364 29.107,26.343 29.107,25.033 C29.107,24.335 29.42,23.846 29.808,23.305 C30.036,23.343 30.243,23.364 30.406,23.364 C31.123,23.364 31.511,22.981 31.539,22.604 C31.539,22.266 31.264,22.01 30.835,22.01 C30.169,22.01 28.96,22.63 27.737,22.63 C27.858,22.721 28.058,22.817 28.298,22.908 C27.583,23.551 27.105,24.415 26.923,25.339 L25.053,28.331 C24.738,28.833 24.074,29.816 23.073,30.583 C24.283,30.583 25.085,30.61 26.109,28.991 L27.068,27.457 C27.139,27.656 27.226,27.85 27.329,28.04 L25.422,31.091 C25.105,31.597 24.447,32.571 23.442,33.343 C24.652,33.343 25.454,33.371 26.478,31.753 L28.119,29.125 C28.242,29.256 28.371,29.384 28.507,29.506 L26.191,33.214 C25.873,33.721 25.219,34.693 24.212,35.464 C25.422,35.464 26.224,35.493 27.247,33.874 L29.505,30.259 C29.654,30.353 29.806,30.444 29.964,30.53 L27.207,34.941 C26.889,35.448 26.235,36.417 25.228,37.191 C26.438,37.191 27.24,37.219 28.264,35.601 L31.102,31.058 C31.27,31.122 31.44,31.184 31.613,31.239 L28.406,36.372 C28.093,36.872 27.424,37.859 26.428,38.622 C27.637,38.622 28.44,38.65 29.463,37.032 L32.881,31.562 C32.916,31.568 32.95,31.573 32.984,31.58 C33.077,31.876 33.142,32.152 33.142,32.427 C33.142,34.146 32.014,35.664 30.66,36.836 C30.747,36.874 30.898,36.887 31.037,36.887 C31.317,36.887 31.497,36.872 31.624,36.85 C31.31,37.563 30.636,38.484 30.296,38.96 C29.853,38.88 29.208,38.818 28.786,38.818 C28.344,38.818 28.294,39.076 28.294,39.307 C28.294,39.708 28.482,40.027 28.7,40.205 C28.782,40 28.947,39.726 29.763,39.726 C29.779,39.726 29.807,39.728 29.845,39.731 C29.607,39.996 28.86,40.6 28.86,41.086 C28.86,41.408 29.213,41.891 29.678,41.891 C29.651,41.787 29.654,41.692 29.654,41.62 C29.654,41.226 30.003,40.765 30.298,40.443 C30.289,40.539 30.294,40.529 30.294,40.641 C30.294,41.572 30.378,42 30.969,42 C31.259,42 31.459,41.841 31.528,41.793 C31.144,41.44 31.124,41.162 31.124,40.64 C31.125,40.504 31.126,40.371 31.128,40.188 C31.129,40.068 31.127,39.91 31.108,39.796 C31.319,39.767 31.405,39.767 31.568,39.767 C31.568,39.767 32.407,39.7 32.61,40.137 C32.838,39.928 33.169,39.633 33.169,39.308 C33.169,39.093 33.067,38.85 32.634,38.85 C32.47,38.85 31.955,38.95 31.524,38.95 C31.64,38.693 32.155,37.939 32.602,37.392 C32.67,37.604 32.775,37.833 33.009,38.021 C33.042,37.669 33.248,36.556 33.798,35.905 C33.862,36.345 33.948,36.796 33.948,37.747 C33.948,40.061 33.392,41.77 32.211,42.096 C32.365,42.363 32.69,42.604 33.027,42.604 C33.459,42.604 33.694,42.115 33.934,41.654 C34.059,41.994 34.404,42.828 34.75,42.828 C35.096,42.828 35.442,41.994 35.567,41.654 C35.806,42.115 36.042,42.604 36.474,42.604 C36.811,42.604 37.136,42.363 37.29,42.096 C36.109,41.77 35.552,40.061 35.552,37.747 C35.552,36.796 35.638,36.345 35.702,35.905 C36.253,36.556 36.46,37.669 36.491,38.021 C36.726,37.833 36.832,37.604 36.899,37.392 C37.345,37.939 37.861,38.693 37.977,38.95 C37.546,38.95 37.03,38.85 36.867,38.85 C36.435,38.85 36.333,39.093 36.333,39.308 C36.333,39.633 36.664,39.928 36.892,40.137 C37.093,39.7 37.934,39.767 37.934,39.767 C38.096,39.767 38.182,39.767 38.394,39.796 C38.374,39.91 38.373,40.068 38.374,40.188 C38.376,40.371 38.376,40.504 38.377,40.64 C38.377,41.162 38.357,41.44 37.973,41.793 C38.042,41.841 38.242,42 38.532,42 C39.123,42 39.208,41.572 39.208,40.641 C39.208,40.529 39.211,40.539 39.203,40.443 C39.498,40.765 39.847,41.226 39.847,41.62 C39.847,41.692 39.851,41.787 39.822,41.891 C40.288,41.891 40.642,41.408 40.642,41.086 C40.642,40.6 39.895,39.996 39.655,39.731 C39.694,39.728 39.722,39.726 39.737,39.726 C40.554,39.726 40.719,40 40.801,40.205 C41.019,40.027 41.207,39.708 41.207,39.307 C41.207,39.076 41.157,38.818 40.715,38.818 C40.293,38.818 39.649,38.88 39.205,38.96 C38.864,38.484 38.192,37.563 37.877,36.85 C38.004,36.872 38.185,36.887 38.464,36.887 C38.604,36.887 38.754,36.874 38.841,36.836 C37.487,35.664 36.359,34.146 36.359,32.427 C36.359,32.152 36.424,31.876 36.517,31.58 C36.55,31.573 36.586,31.568 36.62,31.562 L40.038,37.032 C41.061,38.65 41.864,38.622 43.073,38.622 C42.077,37.859 41.408,36.872 41.095,36.372 L37.887,31.239 C38.061,31.184 38.232,31.122 38.4,31.058 L41.237,35.601 C42.261,37.219 43.063,37.191 44.273,37.191 C43.266,36.417 42.612,35.448 42.294,34.941 L39.538,30.53 C39.694,30.444 39.847,30.353 39.995,30.259 L42.254,33.874 C43.278,35.493 44.079,35.464 45.289,35.464 C44.282,34.693 43.629,33.721 43.31,33.214 L40.994,29.506 C41.13,29.384 41.26,29.256 41.381,29.125 L43.024,31.753 C44.047,33.371 44.849,33.343 46.059,33.343 C45.053,32.571 44.397,31.597 44.079,31.091 L42.173,28.04 C42.275,27.85 42.362,27.656 42.434,27.457 z" fill="#000000"/>
					<path d="M56,42 L52.5,42 L52.5,22 L56,22 z" fill="#000000"/>
					<path d="M56,62 L52.5,62 L52.5,42 L56,42 z" fill="#FF0000"/>
					<path d="M56,82 L52.5,82 L52.5,62 L56,62 z" fill="#FFCC00"/>
				</g>
		</svg>


    
              <div className ="map_copyright"> &#9400;Bundesministerium der Finanzen</div>
			<div className ="map_copyright">&#9400;gadm.com</div>
               </div>
      )

  };

  



  renderlegend = () => {
	  if(!this.props.loading){
		if(this.props.currentScale != 2) {
			return (
				<div className = "map_legend">
					<div id = "map_legend_headline">

					</div>

					<div>
					<svg width="20" height="10">
					<rect width="10" height="10" fill={this.legend_colours(0)} />
					</svg>
					{this.legend_labels(0)[0]} - {this.legend_labels(0)[1]}
					</div>

					<div>
					<svg width="20" height="10">
					<rect width="10" height="10" fill={this.legend_colours(1)} />
					</svg>
					{this.legend_labels(1)[0]} - {this.legend_labels(1)[1]}
					</div>

					<div>
					<svg width="20" height="10">
					<rect width="10" height="10" fill={this.legend_colours(2)} />
					</svg>
					{this.legend_labels(2)[0]} - {this.legend_labels(2)[1]}
					</div>

					<div>
					<svg width="20" height="10">
					<rect width="10" height="10" fill={this.legend_colours(3)} />
					</svg>
					{this.legend_labels(3)[0]} - {this.legend_labels(3)[1]}
					</div>

					<div>
					<svg width="20" height="10">
					<rect width="10" height="10" fill={this.legend_colours(4)} />
					</svg>
					{this.legend_labels(4)[0]} - {this.legend_labels(4)[1]}
					</div>

					</div>
			); }

		else{
			/// INSERT THIS STUFF IN HERE
			return (
				<div className = "map_legend">
					<div id = "map_legend_headline"></div>


					<div  id = "legend_div_fliessend">

						<svg id = "legend_svg_fliessend" height="75" width="15">
							<defs>
								<linearGradient id="grad1" x1="0%" y1="100%" x2="0%" y2="0%">
									<stop offset="0%" stopColor={this.props.current_color[0]} stopOpacity="1" />
									<stop offset="100%" stopColor={this.props.current_color[4]} stopOpacity="1" />
								</linearGradient>
							</defs>
						<rect id = "legend_bar_fliessend" width="15" height="75" fill="url(#grad1)" />
							</svg>
						<text id = "top_label_fliessend"> {Math.round(Math.max(...this.props.view_multiple ? this.props.indicator_data[1] : this.props.single_indic_data[1]))} </text>
						<text id = "bottom_label_fliessend"> {Math.round(Math.min(...this.props.view_multiple ? this.props.indicator_data[1] : this.props.single_indic_data[1]))} </text>



					</div>



		</div>)
	  }
	  
      }else{
		  return (" ")
	  }

  }


    legendInterpolar = () => {





    }






  ///////////////// SCALES TO CREATE AS OPTIONS /////////////////////////////
  // formulae to create scale and individual values for sequential scale
  scaleInterpolar = () => {
      let DomMin = Math.min(...this.props.view_multiple ? this.props.indicator_data[1] : this.props.single_indic_data[1]);
      let DomMax = Math.max(...this.props.view_multiple ? this.props.indicator_data[1] : this.props.single_indic_data[1]);
      const interpolarScale = d3.scaleSequential(d3.interpolateRgb("gainsboro", "navy"))
            .domain([DomMin, DomMax])
            // .interpolator(d3.interpolateCool);
      return interpolarScale
  }

  valueInterpolar = (x) => {
      let DomMin = Math.min(...this.props.view_multiple ? this.props.indicator_data[1] : this.props.single_indic_data[1]);
      let DomMax = Math.max(...this.props.view_multiple ? this.props.indicator_data[1] : this.props.single_indic_data[1]);
      // creates an interpolar scale with the minimum and maximum colours selected from the current color range
      const interpolarScale = d3.scaleSequential(d3.interpolateRgb(this.props.current_color[0], this.props.current_color[4]))
            .domain([DomMin, DomMax])
            // .interpolator(d3.interpolateCool);
      return interpolarScale(x)
  }


  // formulae to create scale and individual values for quantile scale
  scaleQuantile = () => {
      const quantileScale = d3.scaleQuantile()
            .domain((this.props.view_multiple ? this.props.indicator_data[1] : this.props.single_indic_data[1]))
            .range(this.props.current_color);
  return quantileScale
  }

  valueQuantile = (x) => {
  const quantileScale = d3.scaleQuantile()
            .domain((this.props.view_multiple ? this.props.indicator_data[1] : this.props.single_indic_data[1]))
            .range(this.props.current_color);
  return quantileScale(x)
  }


    // formulae to generate scale and values for threshold scale via Quantize method
   scaleQuantize = () => {
            // the three dots convert the array into a list so they can be used as input for Math.min and Math.max
      let DomMin = Math.min(...this.props.view_multiple ? this.props.indicator_data[1] : this.props.single_indic_data[1]);
      let DomMax = Math.max(...this.props.view_multiple ? this.props.indicator_data[1] : this.props.single_indic_data[1]);
      // let DomStep = (DomMax - DomMin) / (this.props.current_color.length);
      // console.log(DomStep)
      const QuantizeScale = d3.scaleQuantize()
            .domain([DomMin, DomMax])
            .range(this.props.current_color);
  return QuantizeScale
  }
    // formula to generate values for threshold scale via Quantize method
  valueQuantize = (x) => {
      // the three dots convert the array into a list so they can be used as input for Math.min and Math.max
      // console.log(x)
      // console.log(this.props.indicator_data[1])
      let DomMin = Math.min(...(this.props.view_multiple ? this.props.indicator_data[1] : this.props.single_indic_data[1]));
      let DomMax = Math.max(...(this.props.view_multiple ? this.props.indicator_data[1] : this.props.single_indic_data[1]));
      // let DomStep = (DomMax - DomMin) / (this.props.current_color.length);
      // console.log(DomMin)
      // console.log(DomMax)

      const QuantizeScale = d3.scaleQuantize()
            .domain([DomMin, DomMax])
            .range(this.props.current_color);
  return QuantizeScale(x)
  }



  ///////////////// SCALES TO CREATE AS OPTIONS /////////////////////////////

    // formula to create the legend colours
    //TODO: make this dynamic to scale options (currently this always shows normal scale)
    legend_colours = (x) => {
    return this.props.current_color[x];
  }

  // formulae to create the legend labels
  legend_labels = (x) => {
      // console.log(typeof this.props.current_map[0].properties.indicator)
        if (typeof this.props.current_map[0].properties.indicator === 'undefined' || this.props.indicator_data[1] === undefined) {
        return ['n/a', 'n/a']}
      else {
          if (this.props.currentScale == 0) {

              var output = this.scaleQuantize().invertExtent(this.props.current_color[x]);
                output[0] = Math.round(output[0]);
                output[1] = Math.round (output[1]);
                return output}

          else if(this.props.currentScale ==1) {
              var output = this.scaleQuantile().invertExtent(this.props.current_color[x]);
                output[0] = Math.round(output[0]);
                output[1] = Math.round (output[1]);
                return output}
          else {
              //TODO: ADD IN HERE WHATEVER THE LEGEND LABELS SHOULD BE IN CASE OF INTERPOLAR SCALE; PROBABLY JUST MIN MAX?
              return ['n/a', 'n/a']
          }

          }
          }


  // formula to create the values for the color on the map
  color = (x) => {
      // console.log(x)
      if (x == null || x === undefined || this.props.indicator_data[1] === undefined) {
        return '#6C7B8B';
      } else {
          if(this.props.currentScale == 0)
                {
          // console.log(this.props.indicator_data[1]);
        // console.log(dom_input);
              return this.valueQuantize(x);
                }

           else if(this.props.currentScale == 1)
          { return this.valueQuantile(x)}

           else{
             return this.valueInterpolar(x)   }
      }

      // ALTERNATIVE SCALE BELOW
      // var linearScale =  d3.scaleLinear()
      // 	.domain([Math.min(...this.props.indicator_data[1]), Math.max(...this.props.indicator_data[1])])
      // 	.range(['#eff3ff', '#bdd7e7', '#6baed6', '#3182bd', '#08519c']);
      // return linearScale(x)
    };

    /**
       *This function creates the projection of the map.
       *
       * @return {d3.geoMercator}
       * @memberof Map
       */
    projection() {
      return d3.geoMercator()
          .scale(2000)
          .center(this.state.germany)
          .translate([200, 240]);
    }


    // handleClick(i) {
    // 	alert(`${this.props.current_map[i].properties.NAME_2}`)
    // }

    /**
     *This function handles the click on the map.
     *
     * @param {int} i this is the number in current_map
     * @memberof Map
     */
    handleClick = (i) =>{
      this.props.dispatch(changeNameDispatch(i));
	}
	
	loadingCirkle = () =>{
		if(this.props.loading){
			return(
			<div className="lds-roller" id="map_loader"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
		
			)}
			else{
				return ''
			}
	}


    /**
     *This renders the map.
     *
     * @return {JSX}
     * @memberof Map
     */
    render() {
      if (this.props.firstload) {
        return (<div className="lds-roller1"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>);
	  }
      return (
	
        <div id="map">

          <h6>{this.headline()}</h6>

            <div id = "map_content">
			{this.loadingCirkle()}
            <svg id="svg" width="100%" height="100%" viewBox="0 0 400 450">

                <g className="map">
              {
                this.props.current_map.map((d, i) =>

                  <path
                    key={`path-${i}`}
                    d={d3.geoPath().projection(this.projection())(d)}
                    className={d.properties.Kennziffer}
                    fill= {this.color(d.properties.indicator)}
                    stroke="#000000"
                    strokeWidth={0.5}
                    onMouseOver={this.handleClick.bind(this, i)}
                  />
                )
              }
            </g>


              </svg>
			  <div id="map_reset">
			  <ResetButton/>
			  </div>
			  <div>
                {this.renderlogo()}
            
           

           

                {this.renderlegend()}
            </div>
			  </div>
            





        </div>
	
      );
    }
}

/**
 *This function creates a dispatch ready input from the indicators.
 *
 * @param {int} value of the index in the current_map
 * @return {Dict} that is send to the dispatch
 */
function changeNameDispatch(value) {
  return {
    type: 'CHANGE_NAME',
    value,
  };
}

/**
 *Here the props are selected from the store.
 *
 * @param {state} state current state of the store
 * @return {props} returns the selected states as props
 */
function mapStateToProps(state) {
  return {
    current_map: state.current_map,
    loading: state.loading,
    indicator_data: state.indicator_data,
    view_multiple: state.view_multiple,
    single_indic_data: state.single_indic_data,
    current_color: state.current_color,
	  currentScale: state.currentScale,

	  firstload: state.firstload,
      value_dic: state.value_dic,
      metadata: state.metadata,
  };
}

export default connect(mapStateToProps)(Map);

//
// // // MY MAP PLAY AROUND #1
// //
// //
// //
// //
// //
// // class Map extends Component {
// //     constructor(props) {
// //         super(props),
// //             this.state = {
// //
// //                 germany: [10.3736325636218, 51.053178814923065]
// //             }
// //
// //     }
// //
// //     // define default projection
// //     projection() {
// //         return d3.geoMercator()
// //             .scale(2000)
// //             .center(this.state.germany)
// //             .translate([200, 240])
// //     }
// //
// //
// //     //Define default path generator
// //     path() {
// //         return d3.geoPath()
// //             .projection(projection());
// //     }
// //
// //
// //     svg() {
// //         return d3.select("body")
// //             .append("svg")
// //             .attr("id", "chart")
// //             // .attr("width", w)
// //             // .attr("height", h)
// //             .append("g")
// //         // .attr("tranform", "translate(0" + margin.left + "," + margin.top + ")");
// //     }
// //
// //
// //     color() {
// //     	return d3.scaleQuantile()
// // 			.range(["rgb(237, 248, 233)", "rgb(186, 228, 179)", "rgb(116,196,118)", "rgb(49,163,84)",
// // 				"rgb(0,109,44)"]);
// // 	}
// //
// //
// //     // handleClick(i) {
// //     // 	alert(`${this.props.current_map[i].properties.NAME_2}`)
// //     // }
// //     handleClick = (i) => {
// //
// //         this.props.dispatch(changeNameDispatch(i))
// //     }
// //
// //
// //     render() {
// //         if (this.props.loading) {
// //             return 'Loading...'
// //         }
// //         return (
// //
// //             <div>
// //
// //                 <svg width="100%" height="100%" viewBox="0 0 400 450">
// //
// // 					// this is other stuff
// //                     d3.csv("us-cities-agriculture.csv", function(data){
// //
// //                     color.domain([d3.min(data, function (d) {
// //                         return d.value;
// //                     }),
// //                         d3.max(data, function (d) {
// //                             return d.value;
// //                         })
// //                     ]);
// //
// //                     d3.json("us-states.json", function(json){
// //
// //                     //Merge the agriculture and GeoJSON data
// //                     //Loop through once for each agriculture data value
// //                     for(var i = 0; i < data.length; i++){
// //                     // grab state name
// //                     var dataState = data[i].state;
// //
// //                     //grab data value, and convert from string to float
// //                     var dataValue = parseFloat(data[i].value);
// //
// //                     //find the corresponding state inside the GeoJSON
// //                     for(var n = 0; n < json.features.length; n++){
// //
// //                     // properties name gets the states name
// //                     var jsonState = json.features[n].properties.name;
// //                     // if statment to merge by name of state
// //                     if(dataState == jsonState){
// //                     //Copy the data value into the JSON
// //                     // basically creating a new value column in JSON data
// //                     json.features[n].properties.value = dataValue;
// //
// //                     //stop looking through the JSON
// //                     break;
// //                 }
// //                 }
// //                 }
// //
// //                     svg.selectAll("path")
// //                     .data(json.features)
// //                     .enter()
// //                     .append("path")
// //                     .attr("d", path)
// //                     .style("fill", function(d){
// //                     //get the data value
// //                     var value = d.properties.value;
// //
// //                     if(value){
// //                     //If value exists
// //                     return color(value);
// //                 } else {
// //                     // If value is undefined
// //                     //we do this because alaska and hawaii are not in dataset we are using but still in projections
// //                     return "#ccc"
// //                 }
// //
// //                 });
// //
// //
// //                 });
// //
// //                 })
// //
// //
// //                     <g className="Deutschland">
// //                         {
// //                             this.props.current_map.map((d, i) =>
// //
// //                                 <path
// //                                     key={`path-${i}`}
// //                                     d={d3.geoPath().projection(this.projection())(d)}
// //                                     className={d.properties.Kennziffer}
// //                                     fill={`rgba(256,0,0,${(1 / d.properties.indicator)})`}
// //
// //                                     stroke="#000000"
// //                                     strokeWidth={0.5}
// //                                     onClick={this.handleClick.bind(this, i)}
// //                                 />
// //                             )
// //                         }
// //                     </g>
// //                 </svg>
// //             </div>
// //         )
// //     }
// // }
// //
// //
// // /// functions at bottom from original file
// //
// //
// // function changeName(value) {
// //     return {
// //         type: "CHANGE_NAME",
// //         value
// //     };
// // }
// //
// // function mapStateToProps(state) {
// //     return {
// //         current_map: state.current_map,
// //         loading: state.loading
// //     };
// // }
// //
// //
// // export default connect(mapStateToProps)(Map);
// //
// //
//
// /////////////// MY MAP PLAY AROUND 2
//
//
// class Map extends Component {
//     constructor(props) {
//         super(props),
//             this.state = {
//
//                 germany: [10.3736325636218, 51.053178814923065]
//             }
//
//     }
//
//     projection() {
//         return d3.geoMercator()
//             .scale(2000)
//             .center(this.state.germany)
//             .translate([200, 240])
//     }
//
//     // handleClick(i) {
//     // 	alert(`${this.props.current_map[i].properties.NAME_2}`)
//     // }
//     handleClick = (i) => {
//
//         this.props.dispatch(changeNameDispatch(i))
//     }
//
// 	// ALL THE D3 THIS IS SO SMART
//      //Width and height
// 	var w = 300;
//     var h = 500;
//
//     var margin = {
//           top: 60,
//           bottom: 40,
//           left: 70,
//           right: 40
//         };
//
//       var width = w - margin.left - margin.right;
//       var height = h - margin.top - margin.bottom;
//
//
//       // define map projection
//       var projection = projection();
//
//       //Define default path generator
//       var path = d3.geoPath()
//         	.projection(projection);
//
//       var svg = d3.select("body")
//         .append("svg")
//         .attr("id", "chart")
//         .attr("width", w)
//         .attr("height", h)
//         .append("g")
//         .attr("tranform", "translate(0" + margin.left + "," + margin.top + ")");
//
//         var color = d3.scaleQuantile()
//           .range(["rgb(237, 248, 233)", "rgb(186, 228, 179)", "rgb(116,196,118)", "rgb(49,163,84)", "rgb(0,109,44)"]);
//
//       //d3.csv("us-cities-agriculture.csv", function(data){
//
// 	   var data = this.props.current_map.features.indicator;
//
//        var data_2 = (data) => {color.domain([ d3.min(data, function(d){ return d.value; }),
//           d3.max(data, function(d){ return d.value; })
//           ])};
//
//
//        svg.selectAll("path")
//           .data(this.prop.current_map.features)
//           .enter()
//           .append("path")
//           .attr("d", path)
//           .style("fill", function(d){
//             //get the data value
//             var value = d.properties.value;
//
//             if(value){
//               //If value exists
//               return color(value);
//             } else {
//               // If value is undefined
//               //we do this because alaska and hawaii are not in dataset we are using but still in projections
//               return "#ccc"
//             }
//
//           });
//
//
//       );
//
// )
//
// /// THE OLD RENDER PART
//     render() {
//         if (this.props.loading) {
//             return 'Loading...'
//         }
//         return (
//
//             <div>
//
//                 <svg width="100%" height="100%" viewBox="0 0 400 450">
//
//                     <g className="Deutschland">
//                         {
//                             this.props.current_map.map((d, i) =>
//
//                                 <path
//                                     key={`path-${i}`}
//                                     d={d3.geoPath().projection(this.projection())(d)}
//                                     className={d.properties.Kennziffer}
//                                     fill={`rgba(256,0,0,${(1 / d.properties.indicator)})`}
//
//                                     stroke="#000000"
//                                     strokeWidth={0.5}
//                                     onClick={this.handleClick.bind(this, i)}
//                                 />
//                             )
//                         }
//                     </g>
//                 </svg>
//             </div>
//         )
//     }
// }
//
//
//
//
//
// /// functions from bottom of thing
//
// function changeName(value) {
//     return {
//         type: "CHANGE_NAME",
//         value
//     };
// }
//
// function mapStateToProps(state) {
//     return {
//         current_map: state.current_map,
//         loading: state.loading
//     };
// }
//
//
// export default connect(mapStateToProps)(Map);





  // legned = (x) => {
  // const colorLegendG = svg.append("g")
  // 	.attr('transform', 'translate(185,150)')
  // 	.
  //
  //
  //
  //
  // 	}

  // legend = (x) => {
  //   // put any functions and vars and consts in here: then RETURN their call!!
  //     var height = 50;
  //     var svg = d3.select('svg');
  //
  //     const colorlegend = (selection, props) =>
  //     {const {colorScale, circleRadius, spacing, textOffset} = props;
  //     const groups = selection.selectAll('g')
  //         .data(colorScale.domain());
  //         const groupsEnter = groups.enter().append('g');
  //         groupsEnter
  //             .merge(groups)
  //             .attr(transform, (d,i) => `translate(0,${i * spacing}`);
  //         groups.exit().remove();
  //         groupsEnter.append('circle')
  //             .merge(groups.select('circle'))
  //             .attr('r', circleRadius)
  //             .attr('fill', colorScale);
  //         groupsEnter.append('text')
  //             .merge(groups.select('text'))
  //             .text(d => d)
  //             .attry('y', textOffset)}
  //
  //
  //      var hello = svg.append('g')
  //             .attr('transform', `translate(100, ${height / 2})`)
  //             .call(colorlegend,
  //                 {
  //                     colorScale : this.color(),
  //                     circleRadius: 30,
  //                     spacing: 180,
  //                     textOffset: 120
  //                 });
  //
  //     return hello(x)


// ATTEMPT ONE FOR LEGEND
//
//    quantileScale = (x, dom_input) => {
//      d3.scaleQuantile(x)
//          .domain(dom_input)
//          .range(this.props.current_color);
//    }
//
//    domain = () => {(this.props.view_multiple ? this.props.indicator_data[1] : this.props.single_indic_data[1])};
//
//     color = (x) => {
//       if (x == null) {
//         return '#b3daff';
//       } else {
//           // console.log(this.props.indicator_data[1]);
//
//         const dom_input = this.domain();
//         // console.log(dom_input);
//
//         return this.quantileScale(x, dom_input);
//       }



  // THIS THRESHOLD SCALE FORMULATION WORKS. HOWEVER, THE OTHER VERSION VIA QUANTIZE IS MORE ELEGANT; HENCE DISCARDED HERE
  // // formulae to generate scale and values for threshold scale
  //  scaleThres = () => {
  //           // the three dots convert the array into a list so they can be used as input for Math.min and Math.max
  //     let DomMin = Math.min(...this.props.view_multiple ? this.props.indicator_data[1] : this.props.single_indic_data[1]);
  //     let DomMax = Math.max(...this.props.view_multiple ? this.props.indicator_data[1] : this.props.single_indic_data[1]);
  //     let DomStep = (DomMax - DomMin) / (this.props.current_color.length);
  //     // console.log(DomStep)
  //     const ThresScale = d3.scaleThreshold()
  //           .domain([DomMin+(DomStep), DomMin+(2*DomStep), DomMin+(3*DomStep), DomMin+(4*DomStep)])
  //           .range(this.props.current_color);
  // return ThresScale
  // }
  //
  // valueThres = (x) => {
  //     // the three dots convert the array into a list so they can be used as input for Math.min and Math.max
  //     let DomMin = Math.min(...this.props.view_multiple ? this.props.indicator_data[1] : this.props.single_indic_data[1]);
  //     let DomMax = Math.max(...this.props.view_multiple ? this.props.indicator_data[1] : this.props.single_indic_data[1]);
  //     let DomStep = (DomMax - DomMin) / (this.props.current_color.length);
  //
  //     const ThresScale = d3.scaleThreshold()
  //           .domain([DomMin+(DomStep), DomMin+(2*DomStep), DomMin+(3*DomStep), DomMin+(4*DomStep)])
  //           .range(this.props.current_color);
  // return ThresScale(x)
  // }




/// THIS IS THE WORKING STATIC VERSION OF THE LEGEND (without the INTERPOLAR SCALE LEGEND)
//
//                 <div id = "map_legend">
//                 <div id = "map_legend_headline">
//
//                 </div>
//
//                 <div>
//                 <svg width="20" height="10">
//                 <rect width="10" height="10" fill={this.legend_colours(0)} />
//                 </svg>
//                 {this.legend_labels(0)[0]} - {this.legend_labels(0)[1]}
//                 </div>
//
//                 <div>
//                 <svg width="20" height="10">
//                 <rect width="10" height="10" fill={this.legend_colours(1)} />
//                 </svg>
//                 {this.legend_labels(1)[0]} - {this.legend_labels(1)[1]}
//                 </div>
//
//                 <div>
//                 <svg width="20" height="10">
//                 <rect width="10" height="10" fill={this.legend_colours(2)} />
//                 </svg>
//                 {this.legend_labels(2)[0]} - {this.legend_labels(2)[1]}
//                 </div>
//
//                 <div>
//                 <svg width="20" height="10">
//                 <rect width="10" height="10" fill={this.legend_colours(3)} />
//                 </svg>
//                 {this.legend_labels(3)[0]} - {this.legend_labels(3)[1]}
//                 </div>
//
//                 <div>
//                 <svg width="20" height="10">
//                 <rect width="10" height="10" fill={this.legend_colours(4)} />
//                 </svg>
//                 {this.legend_labels(4)[0]} - {this.legend_labels(4)[1]}
//                 </div>
//
//                 </div>